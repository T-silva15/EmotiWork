@page
@model EmotiWork.Pages.DashboardModel
@{
    ViewData["Title"] = "Dashboard - EmotiWork";
    Layout = null;
}

<!DOCTYPE html>
<html lang="pt-pt">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="~/css/landing.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/sidebar.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/home.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/dashboard.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/backoffice.css" asp-append-version="true" />
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" />
    <!-- Chart.js for gauge -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- Gauge plugin for Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chartjs-gauge@0.3.0/dist/chartjs-gauge.min.js"></script>
</head>
<body class="home-body">
    <!-- Left Sidebar -->
    <aside class="sidebar-left">
        <nav class="sidebar-nav">
            <ul class="nav-items">
                <li class="nav-item">
                    <a href="/Team" class="nav-link" aria-label="Equipa">
                        <i class="fas fa-users"></i>
                    </a>
                </li>
                <li class="nav-item active">
                    <a href="/Dashboard" class="nav-link" aria-label="Dashboard">
                        <i class="fas fa-gauge-high"></i>
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/Questionnaire" class="nav-link" aria-label="Questionário">
                        <i class="fas fa-circle-question"></i>
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/Statistics" class="nav-link" aria-label="Estatísticas">
                        <i class="fas fa-chart-line"></i>
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/Notifications" class="nav-link" aria-label="Notificações">
                        <i class="fas fa-bell"></i>
                        <span class="notification-badge"></span>
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/Reports" class="nav-link" aria-label="Relatórios">
                        <i class="fas fa-user-secret"></i>
                    </a>
                </li>
                <li class="nav-item nav-item-bottom">
                    <a href="/Settings" class="nav-link" aria-label="Definições">
                        <i class="fas fa-gear"></i>
                    </a>
                </li>
            </ul>
        </nav>
    </aside>


    <!-- Main Content -->
    <main class="main-content">
        <!-- Top Bar -->
        <header class="top-bar">
            <div class="logo-container">
                <a href="/Home" class="logo-link">
                    <img src="~/img/emotiwork.png" alt="EmotiWork Logo" class="logo-img" />
                    <span class="logo-text">EmotiWork</span>
                </a>
            </div>
            <div class="user-info">
                <a href="/Profile" class="user-link">
                    <img src="~/img/user-avatar.png" alt="User Avatar" class="user-avatar" />
                    <span class="user-name">José</span>
                </a>
            </div>
        </header>

        <!-- Page Content -->
        <div class="content-container dashboard-container">
            <h1 class="page-title">DASHBOARD</h1>

            <div class="fullwidth-content">
                <!-- Top row with gauge and buttons -->
                <div class="top-row">
                    <div class="gauge-wrapper">
                        <div class="gauge-title">Almoço</div>
                        <div class="gauge-container">
                            <canvas id="gaugeChart"></canvas>
                            <div class="gauge-time" id="gaugeTime">00:00</div>
                        </div>
                        <div class="gauge-actions">
                            <button class="gauge-btn check-in" id="checkInBtn">Check-in</button>
                            <button class="gauge-btn check-out" id="checkOutBtn">Check-out</button>
                        </div>
                    </div>

                    <div class="separator-line"></div>

                    <div class="action-buttons-wrapper">
                        <a href="/Team" class="action-btn">Ver Equipa</a>
                        <a href="/Notifications" class="action-btn">Notificações</a>
                        <a href="/Vacation" class="action-btn">Marcar Férias</a>
                        <a href="#" class="action-btn" data-open-modal="backoffice">Backoffice</a>
                    </div>
                </div>

                <!-- Bottom row with lists -->
                <div class="bottom-row">
                    <div class="list-container">
                        <div class="list-header">Aniversariantes</div>
                        <div class="list-content">
                            <div class="list-item">
                                <div class="user-avatar-small"></div>
                                <span>Joana Ferreira</span>
                            </div>
                        </div>
                    </div>

                    <div class="list-container">
                        <div class="list-header">Férias</div>
                        <div class="list-content">
                            <div class="list-item">
                                <div class="user-avatar-small"></div>
                                <span>Carlos Paiva</span>
                            </div>
                        </div>
                    </div>

                    <div class="list-container">
                        <div class="list-header">Recém-Contratados</div>
                        <div class="list-content">
                            <div class="list-item">
                                <div class="user-avatar-small"></div>
                                <span>José Miguel</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Footer -->
        <footer class="home-footer">
            <div class="footer-content">
                <div class="copyright">EmotiWork - 2025</div>
                <div class="privacy-policy">
                    <a href="/Privacy" class="privacy-link">Proteção de Dados</a>
                </div>
            </div>
        </footer>
    </main>

    <!-- Backoffice Modal -->
    <div id="backofficeModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title">BACKOFFICE</h1>
                <span class="close-modal">&times;</span>
            </div>
            <div class="modal-body">
                <div class="backoffice-grid">
                    <!-- First row -->
                    <a href="/Backoffice/SendAnnouncement" class="backoffice-card">
                        <div class="card-content">
                            <span class="card-text">Enviar Notificação</span>
                        </div>
                    </a>
                    <a href="/Backoffice/Users" class="backoffice-card">
                        <div class="card-content">
                            <span class="card-text">Gerir Utilizadores</span>
                        </div>
                    </a>
                    <a href="/Backoffice/Departments" class="backoffice-card">
                        <div class="card-content">
                            <span class="card-text">Gerir Departamentos</span>
                        </div>
                    </a>

                    <!-- Second row -->
                    <a href="/Backoffice/AdminStatistics" class="backoffice-card">
                        <div class="card-content">
                            <span class="card-text">Estatísticas</span>
                        </div>
                    </a>
                    <a href="/Backoffice/Teams" class="backoffice-card">
                        <div class="card-content">
                            <span class="card-text">Gerir Equipas</span>
                        </div>
                    </a>
                    <a href="/Backoffice/Questionnaires" class="backoffice-card">
                        <div class="card-content">
                            <span class="card-text">Gerir Questionários</span>
                        </div>
                    </a>

                    <!-- Third row -->
                    <div class="empty-space"></div>
                    <a href="/Backoffice/Reports" class="backoffice-card">
                        <div class="card-content">
                            <span class="card-text">Ver Denúncias</span>
                        </div>
                    </a>
                    <div class="empty-space"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- JavaScript -->
    <script>
        // Gauge functionality for displaying current time
        document.addEventListener('DOMContentLoaded', function() {
            const ctx = document.getElementById('gaugeChart').getContext('2d');
            const gaugeTimeDisplay = document.getElementById('gaugeTime');
            const checkInBtn = document.getElementById('checkInBtn');
            const checkOutBtn = document.getElementById('checkOutBtn');

            // Remove any existing time markers if they're present
            const existingTimeMarkers = document.querySelector('.time-markers');
            if (existingTimeMarkers) {
                existingTimeMarkers.remove();
            }

            // Variables for gauge and time tracking
            let gaugeValue = 0;
            let checkInTime = null;
            let checkOutScheduled = false;
            let timerInterval = null;

            // Working hours (9:00 to 17:00 = 8 hours)
            const workStartHour = 9;
            const workEndHour = 17;
            const totalWorkMinutes = (workEndHour - workStartHour) * 60;

            // Initialize the gauge chart
            const gaugeChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    datasets: [{
                        data: [gaugeValue, 100 - gaugeValue],
                        backgroundColor: [
                            '#00b7c3',
                            '#e9ecef'   
                        ],
                        borderWidth: 0,
                        circumference: 180,
                        rotation: 270
                    }]
                },
                options: {
                    cutout: '75%',
                    responsive: true,
                    maintainAspectRatio: false,
                    animation: {
                        duration: 500
                    },
                    plugins: {
                        tooltip: {
                            enabled: false
                        },
                        legend: {
                            display: false
                        }
                    }
                }
            });

                    // Update gauge based on current time
        function updateGaugeToCurrentTime() {
            const now = new Date();
            const currentHour = now.getHours();
            const currentMinute = now.getMinutes();

            // Calculate minutes elapsed since work day start
            let minutesElapsed = (currentHour - workStartHour) * 60 + currentMinute;

            // Constrain to work hours
            if (currentHour < workStartHour) {
                minutesElapsed = 0; // Before work hours
            } else if (currentHour >= workEndHour) {
                // If it's past end of workday (5:00 PM/17:00), set to 100%
                minutesElapsed = totalWorkMinutes; // This should be 480 minutes (8 hours)
            }

            // Calculate percentage through work day
            const percentComplete = Math.min(Math.max((minutesElapsed / totalWorkMinutes) * 100, 0), 100);

            // Update gauge - ensure it's 100% if past workday end
            gaugeValue = currentHour >= workEndHour ? 100 : percentComplete;
            gaugeChart.data.datasets[0].data = [gaugeValue, 100 - gaugeValue];
            gaugeChart.update();

            // Update time display
            const formattedHour = currentHour.toString().padStart(2, '0');
            const formattedMinute = currentMinute.toString().padStart(2, '0');
            gaugeTimeDisplay.textContent = `${formattedHour}:${formattedMinute}`;

            // Update button states based on time of day
            if (currentHour < 12) {
                enableCheckIn();
            } else if (currentHour >= 17) {
                enableCheckOut();
            }
        }

            // Check-in button functionality
            checkInBtn.addEventListener('click', function() {
                if (checkInBtn.disabled) return;

                checkInTime = new Date();

                // Visual feedback
                checkInBtn.disabled = true;
                checkInBtn.classList.add('disabled');
                checkOutBtn.disabled = false;
                checkOutBtn.classList.remove('disabled');

                // Indicate check-in time
                const currentHour = checkInTime.getHours();
                const currentMinute = checkInTime.getMinutes();
                const formattedHour = currentHour.toString().padStart(2, '0');
                const formattedMinute = currentMinute.toString().padStart(2, '0');

                alert(`Check-in: ${formattedHour}:${formattedMinute}`);
            });

            // Check-out button functionality
            checkOutBtn.addEventListener('click', function() {
                if (checkOutBtn.disabled) return;

                const checkOutTime = new Date();

                // Visual feedback
                checkOutBtn.disabled = true;
                checkOutBtn.classList.add('disabled');
                checkInBtn.disabled = false;
                checkInBtn.classList.remove('disabled');

                // Determine total work duration
                let duration = "Unknown";
                if (checkInTime) {
                    const durationMinutes = Math.floor((checkOutTime - checkInTime) / 60000);
                    const hours = Math.floor(durationMinutes / 60);
                    const minutes = durationMinutes % 60;
                    duration = `${hours}h ${minutes}m`;
                }

                // Indicate check-out time
                const currentHour = checkOutTime.getHours();
                const currentMinute = checkOutTime.getMinutes();
                const formattedHour = currentHour.toString().padStart(2, '0');
                const formattedMinute = currentMinute.toString().padStart(2, '0');

                alert(`Check-out: ${formattedHour}:${formattedMinute}\nDuração do turno: ${duration}`);

                // Reset check-in time
                checkInTime = null;
            });

            // Helper functions for button state management
            function enableCheckIn() {
                if (!checkInTime) {
                    checkInBtn.disabled = false;
                    checkInBtn.classList.remove('disabled');
                    checkOutBtn.disabled = true;
                    checkOutBtn.classList.add('disabled');
                }
            }

            function enableCheckOut() {
                if (checkInTime && !checkOutScheduled) {
                    checkOutBtn.disabled = false;
                    checkOutBtn.classList.remove('disabled');
                }
            }

            // Initial update
            updateGaugeToCurrentTime();

            // Update gauge every minute
            setInterval(updateGaugeToCurrentTime, 60000);

            // Also update on page load and when user returns to the page
            window.addEventListener('focus', updateGaugeToCurrentTime);

            // Initial button state
            enableCheckIn();
        });

        // Keep the existing modal functionality
        document.addEventListener('DOMContentLoaded', function() {
            // Modal functionality
            const modal = document.getElementById('backofficeModal');
            const modalTriggers = document.querySelectorAll('[data-open-modal="backoffice"]');
            const closeModal = modal.querySelector('.close-modal');

            // Open modal when trigger is clicked
            modalTriggers.forEach(trigger => {
                trigger.addEventListener('click', function(e) {
                    e.preventDefault();
                    modal.style.display = 'block';
                    document.body.style.overflow = 'hidden'; // Prevent background scrolling
                });
            });

            // Close modal when X is clicked
            closeModal.addEventListener('click', function() {
                modal.style.display = 'none';
                document.body.style.overflow = '';
            });

            // Close modal when clicking outside the modal content
            window.addEventListener('click', function(e) {
                if (e.target === modal) {
                    modal.style.display = 'none';
                    document.body.style.overflow = '';
                }
            });

            // Close modal on escape key
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape' && modal.style.display === 'block') {
                    modal.style.display = 'none';
                    document.body.style.overflow = '';
                }
            });
        });
    </script>
</body>
</html>
